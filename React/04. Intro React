# Chapter 1: Intro React

## 07. useState 를 통해 컴포넌트에서 바뀌는 값 관리하기
- useState: 상태(state : 동적인 값)를 관리
  - 첫번째 원소는 현재 상태, 두번째 원소는 Setter 함수
  - 배열 비구조화 할당을 통하여 각 원소 추출
- 리액트에서 엘리먼트에 이벤트를 설정해줄때에는 on이벤트이름={실행하고싶은함수} 형태로 설정
  - 함수 실행 형태로 기입 시 렌더링되는 시점에서 함수가 호출되기 때문에 함수형태로 설정
- 함수형 업데이트
  - setter에 함수를 등록하는 방식으로 값을 업데이트
  - 함수형 업데이트는 주로 컴포넌트를 최적화할 때 사용
- 화살표함수
  - 형태
``` js
const funcName () => {
//body
}
```
리액트에서 이벤트 설정을 주로 "on이벤트이름={함수이름}" 형태로 작성한다.

- state 선언 방식
  - const [number, setNumber] = useState(0);
``` js
return(
<div>{number}</div>
)
```

- useState 동작 원리
  - 배열 비구조화 할당을 활용
  - 첫번째 원소는 현재 상태, 두번째 원소는 setter 함수
  - 원래대로라면
``` js
const numberState = useState(0);
const number = numberState[0];
const setNumber = numberState[1];
```

``` js
import React, { useState } from 'react';

function Counter() {
  const [number, setNumber] = useState(0);

  const onIncrease = () => {
    setNumber(prevNumber => prevNumber + 1);
  }

  const onDecrease = () => {
    setNumber(prevNumber => prevNumber - 1);
  }

  return (
    <div>
      <h1>{number}</h1>
      <button onClick={onIncrease}>+1</button>
      <button onClick={onDecrease}>-1</button>
    </div>
  );
}

export default Counter;
```

## 08. Input
- input의 onChange를 사용하면 이벤트 객체 e를 파라미터로 받아올 수 있다.
- 이 객체의 e.target은 이벤트가 발생한 DOM을 가리킨다.
- e.target.value를 조회하면 현재 input의 value값을 알 수 있다.

``` js
import React, { useState } from 'react';

function InputSample() {
  const [text, setText] = useState('');

  const onChange = (e) => {
    setText(e.target.value);
  };

  const onReset = () => {
    setText('');
  };

  return (
    <div>
      <input onChange={onChange} value={text}  />
      <button onClick={onReset}>초기화</button>
      <div>
        <b>값: {text}</b>
      </div>
    </div>
  );

}

export default InputSample;
```

## 09. 여러개의 input 상태 관리하기
